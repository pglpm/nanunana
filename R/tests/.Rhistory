str(Pred12)
str(Pred21)
str(Pred22)
c(str(Pred11))
c(str(Pred11), str(Pred12))
Fit$Posterior2
Fit$Posterior2
Fit$Posterior2
? LaplacesDemon
Fit$Posterior2
Fit$Posterior2
Fit$Posterior1
Fit$Posterior1
Fit$Posterior1
Fit$Monitor
Fit$Posterior2
Fit$Posterior2
Fit$Monitor
Fit$Posterior1
Fit$Posterior1
Fit$Posterior2
Fit$Posterior1
str(Fit)
str(Pred11)
quit()
n
hyperprior(1,mydata)
test <- hyperprior(1,mydata)
str(test)
Consort(Sample)
testm[1] <- 2
? rep
rep.int(0,10)
testm <- rep.int(0,10)
testm[1]
testm[1,]
testm[,1]
testm[1]
testm[3]
testm[11]
testm[10]
testm[0]
model(0,2)
model(0,2)[1]
model(0,2)[]
model(0,3)[]
model(0,3)[]
model(0)
model(0)[]
? is.model
str(quadr)
str(quadr)
quadr$Posterior
? c
? interval
quit()
n
? rexp
? dhalfc
? dhalfcauchy
rhalfcauchy(1,25)
rhalfcauchy(10,25)
? rep
str(quadr)
str(quadr)
quadr$Summary1
Sample$Summary2
quadr$Summary1
str(quadr)
quadr$Summary1
quadr$Summary2
quadr$Summary1
quadr$Summary1
quadr$Summary1
str(quadr)
quadr$Summary1
quadr$Summary1
quadr$Summary1
quit()
n
quit()
n
quit()
n
quit()
n
? dnorm
? td.scaled
str(postpredictive)
str(Sample)
mean(draws)
n
str(postpredictive)
scale
draws
quit()
n
quit()
n
mun
sigman
me
me
me
mun
sigmat
me
mun
sigmat
sqrt(sigmat)
quit()
n
? dev.off
quit()
n
str(Sample)
Sample$Summary2
length(Sample$Posterior2)
mean(Sample$Posterior2)
sum(dnormv(data$predict,sample$Posterior2,sigma))
sum(dnormv(data$predict,Sample$Posterior2,sigma))
sum(dnormv(data$predict,c(0.1,0.2),sigma))
sum(dnormv(mydata$predict,Sample$Posterior2,sigma))
dnormv(mydata$predict,mu,sigma)
mean(dnormv(mydata$predict,Sample$Posterior2,sigma))
c(1,2)
c(c(1,2),3)
list(c(1,2),3)
test <- list(c(1,2),3)
test[1]
length(Samples$Monitor[1])
length(Sample$Monitor[1])
length(Sample$Monitor[2])
length(Sample$Monitor[1,])
length(Sample$Monitor[,1])
length(Sample$Monitor[,1])
mean(Sample$Monitor[,1])
Sample$Summary2
Sample$Summary1
Sample$Summary2
Sample$Summary1
source('test6.R')
length(Sample$Monitor[,2])
length(Sample$Monitor[,1])
length(Sample$Monitor[1])
dim(Sample$Monitor)
dim(Sample$Monitor)
quit()
n
length(Sample0$Monitor)
length(Sample0$Monitor[,1])
mean(Sample0$Monitor[,1])
min(Sample0$Monitor[,1])
max(Sample0$Monitor[,1])
paste('a','b','c',sep=' ')
quit()
n
is.positive.definite(matrix(c(-2,0,0,-1),2))
as.positive.definite(matrix(c(-2,0,0,-1),2))
? nearPD
nearPD(matrix(c(-2,0,0,-1),2))
? nearPD
library('matrix')
library('Matrix')
nearPD(matrix(c(-2,0,0,-1),2))
quit()
n
Sample$Summary2
pnew.exact
pnew.exact0
pnew.exact0
Sample0$Summary2
?diwish
diwish(scatterm0,5,scattermt)
dinvwishart(scatterm0,5,scattermt)
pnew.exact0
Sample0nuts$Summary2
Sample0nuts$Summary1
Consort(Sample0nuts)
Sample0nuts$Summary1
dim(tsample$Posterior1)
dim(tsample$Posterior1)
pnew.exact
pnew.exact0
pnew.exact0
Sample0$Summary2
dim(Sample0$Monitor)
dim(tsample)
 dim(samplest)
meant

Warning: weights overwritten by binning
Loading required package: rgl
Loading required package: rpanel
Warning messages:
1: In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called 'rgl'
2: In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called 'rpanel'
> tsample$Summary2[c(8,9),'Mean']

Warning: weights overwritten by binning
Loading required package: rgl
Loading required package: rpanel
Warning messages:
1: In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called 'rgl'
2: In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called 'rpanel'
> tsample$Summary2[c(8,9),'Mean']
tsample$Summary2[c(8,9),'Mean']
meant
? mcmc_areas
p_load('bayesplot')
library('pacman')
p_load('bayesplot')
dim(Sample0$Posterior2)
mcmc_areas(Sample0$Posterior2)
pdf('areas.pdf')
mcmc_areas(Sample0$Posterior2)
dev.off()
pdf('areas.pdf')
mcmc_areas(Sample0$Posterior2[,1:2])
dev.off()
pdf('areas.pdf')
mcmc_areas(Sample0$Posterior2[,3:5])
dev.off()
pdf('areas.pdf')
mcmc_areas(Sample0$Posterior2[,3:5], prob=0.75,prob_outer=0.99,point_est='median')
dev.off()
pdf('areas.pdf')
mcmc_areas(Sample0$Posterior2[,3:5], prob=0.9,prob_outer=0.99,point_est='median')
dev.off()
pdf('pairs.pdf')
mcmc_pairs(Sample0$Posterior2)
dev.off()
pdf('pairs_posterior.pdf')
mcmc_pairs(Sample0$Monitor[,2:3])
dev.off()
datanew
Sample0$Summary2
pnew.exact0
len <- length(Sample0$Posterior2[,1])
len
psamp <- rep(0,len)
for(i in 1:len){psamp[i] <- dmvnorm(datanew,mean=Sample0$Posterior2[i,1:2],sigma=matrix(Sample0$Posterior2[,c(3,4,4,5)],2))}
for(i in 1:len){psamp[i] <- dmvnorm(datanew,mean=Sample0$Posterior2[i,1:2],sigma=matrix(Sample0$Posterior2[i,c(3,4,4,5)],2))}
mean(psamp)
pnew.exact0
pdata
? abline
? round
? round
signif(3.456,2)
psamp[1:10]
dim(Sample0$Monitor)
length(psamp)
mon <- Sample0$Monitor[,1]
mon[1:10]
mydata$predict
datanew
signif(c(pi,2*pi,10*pi),2)
quit(
)
n
dim(datat)
? points
save(Sample0,'normaliwishart.RData')
? save
save(Sample0,file='normaliwishart.RData')
? dunif
quit()
n
remove.packages('MCMCpack')
quit()
n
quit()
n
dnorm(5,0,log(1e6),log=T)
dunif[0.2,-1,1,log=T]
dunif(0.2,-1,1,log=T)
mydata
PGF(c(1,2))
dmvnorm(c(1,2),mean=mean0,sigma=sigma0, log=T)
mydata
PGF(c(1,2))
hyperprior0(PGF(c(1,2)),mydata)
hyperprior0(PGF(c(1,2)),mydata)
hyperprior0(PGF(c(1,2)),mydata)
hyperprior0(PGF(c(1,2)),mydata)
hyperprior0(PGF(c(1,2)),mydata)
dim(Sample0$Posterior2)
save(Sample0,file='normalnormaljeffreys.RData')
quit()
n
load(file='normalnormaljeffreys.RData')
Sample0
save(file='normalnormaljeffreys.RData')
ws('normalnormaljeffreys.RData')
save.image(file='normalnormaljeffreys.RData')
? points
save.image(file='normalnormaljeffreys.RData')
quit()
n
? as.initial.values
? as.initial.values
Consort(Sampleinitial)
Consort(Sample0)
? LaplacesDemon
Consort(Sample0)
Consort(Sample0)
Sampleinitial <- Sample0
Consort(Sample0)
Sampleinitial <- Sample0
Sampleinitial <- Sample0
Consort(Sample0)
Consort(Sample0)
quit()
n
normf
normfd/normf
normfd
normf
normfd$integral/normf$integral
normfd$integral
str(normf)
normfd$value/normf$value
load('normalnormaljeffreys.RData')
Sample0$Summary2
datat
normfd$value/normf$value
normfd$value/normf$value
normf$value
normfd$value
normfd$value
normfd$value/normf$value
normfd$value/normf$value
normfd$value
normfd$value/normf$value
normfd$value/normf$value
normfd$value/normf$value
normfd$value/normf$value
normfd$value/normf$value
normfd$value/normf$value
normfd$value/normf$value
quit()
n
load('normalnormaljeffreys.RData')
Sample0$Summary2
library('R2Cuba')
normfd$value/normf$value
7.2e-25/normf$value
quit()
n
load('normalnormaljeffreys.RData')
quit()
n
testsample$Summary2
testsample$Summary1
testsample$Summary2
? rtnorm
library('msm')
? rtnorm
rtnorm(5,2,1,0,1,log=F)
rtnorm(10,2,1,0,1)
length(testsample$Posterior2)
testsample$Posterior2[1:10]
library('ggplot2')
? ggplot
? data.frame
rep(c("a", "b"), each =3)
seq(0,1,0.1)
seq(0,1,length.out=11)
seq(0,1,length.out=10)
length(testexact2)
str(dat2)
dat2
str(testsample)
testsample$Minutes
testsample2$Minutes
testsample3$Minutes
? system.time
time3
time3
time2
time3
sigmad
sigmad
det(sigmad)
det(diag(3))
det(sigmad)
det(sigmad)
det(sigmad)
det(sigmad)
det(sigmad)
det(sigmad)
sigmad
det(sigmad)
det(sigmad)
sigmad
scattermt
datat
meant
datat
datat
scattermt
cov(datat)
cov(datat)
scattermt
cov(datat)*(nt-1)/nt
datat
diag(0,d)
? upper.triangular
diag(0,d)[upper.tri(diag(0,d))]
rho.names
parm.names
diag(5,3)
PGF(1)
PGF(1)
PGF(1)
PGF(1)
meant
meant[2:]
meant[2:,]
meant[-2]
meant[-1:2]
meant[-(1:2)]
np
meant
interval(meant,0,0.4)
PGF(1)
dunif(0.3,-1,1,log=T)
dunif(0.5,-1,1,log=T)
dunif(1.5,-1,1,log=T)
log(1/2)
log(1/2)^nr
? matrix
testr <- 1:3
as.matrix(c(0,testr),3)
as.matrix(c(0,testr),ncol=3)
as.matrix(c(0,testr),ncol=3,nrow=3)
? as.matrix
matrix(c(0,testr),ncol=3,nrow=3)
matrix(c(testr),ncol=3,nrow=3)
library('lavaan')
getCov(testr)
getCov(testr, diagonal=F)
getCov(testr, diagonal=F,names=NULL)
getCov(testr, diagonal=F,names='')
testr <- c(0.5,0.2,-0.5)
testc <- c(1,2,3)
getCov(testr, diagonal=F,sds=testc)
getCov(testr, diagonal=F,sds=sqrt(testc))
0.5/sqrt(1*2)
0.5*sqrt(1*2)
getCov(testr, sds=sqrt(testc))
getCov(testr, sds=sqrt(testc),diagonal=F)
parm.names
parm.names[(d+1):(2*d)]
parm.names[(2*d+1):np]
getCov(parm.names[(2*d+1):np],diagonal=F)
testcov <- getCov(testr, sds=sqrt(testc), diagonal=F)
testcov
dmvnorm(mydata$data, meant, cov, log=T)
meant
mydata$data
dmvnorm(mydata$data, meant, testcov, log=T)
Summary(Sampleinitial)
Sampleinitial$Summary1
Sampleinitial$Summary2
Sampleinitial$Summary2
Sampleinitial$Summary1
? rtmvnorm
? rmvnorm
Sample0 <- Sampleinitial
length(Sample0$Posterior1)
dim(Sample0$Posterior1)
post.dist
nsamples
warnings()
Sampleinitial$Summary1
meant
datat
mean0
sigma0
dnorm(c(1,2,3),0,1)
PGF(1)
PGF(1)
PGF(1)
PGF(rep(0,10))
PGF(0)
quit()
n
Sample0
? nearPD
sigmad
nearPD(sigmad)
nearPD(sigmad)$mat
quit()
n
